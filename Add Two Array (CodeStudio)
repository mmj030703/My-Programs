Problem Link :
https://www.codingninjas.com/codestudio/problems/sum-of-two-arrays_893186?utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_4&leftPanelTab=3

Description : 
Problem Statement
You are given two numbers 'A' and 'B' in the form of two arrays (A[] and B[]) of lengths 'N' and 'M' respectively, where each array element represents a 
digit. You need to find the sum of these two numbers and return this sum in the form of an array.

Note:
1. The length of each array is greater than zero.
2. The first index of each array is the most significant digit of the number. For example, if the array A[] = {4, 5, 1}, then the integer represented by this array is 
   451 and array B[] {3, 4, 5} so the sum will be 451 + 345 = 796. So you need to return {7, 9, 6}.
3. Both numbers do not have any leading zeros in them. And subsequently, the sum should not contain any leading zeros.

Constraints:
1 <= T <= 10^2
1 <= N, M <= 10^4
0 <= A[i], B[i] <= 9
Time Limit: 1 sec

Sample Input 1:
2
4 1 
1 2 3 4
6
3 2
1 2 3
9 9    
Sample Output 1:
1 2 4 0
2 2 2
Explanation For Sample Input 1:
For the first test case, the integer represented by the first array is 1234 and the second array is 6, so the sum is 1234 + 6 =  1240.

For the second test case, the integer represented by the first array is 123 and the second array is 99, so the sum is 123 + 99 = 222.
Sample Input 2:
2
3 3 
4 5 1
3 4 5
2 2
1 1
1 2
Sample Output 2:
7 9 6
2 3


Source Code :
/*
// Good Soln :: BruteForce Soln
// T.C =. O(n+m+logn+n) => O(n)
// S.C =. O(1)
#include <bits/stdc++.h> 
vector<int> findArraySum(vector<int>&a, int n, vector<int>&b, int m) {
	vector<int> ans;
    int n1 = 0, n2 = 0, sum = 0;
    for(int i = 0; i < n; i++) n1 += a[i] * pow(10,n-i-1);
    for(int i = 0; i < m; i++) n2 += b[i] * pow(10,m-i-1);
    sum = n1 + n2;
    while(sum != 0) {
        int rem = sum % 10;
        ans.push_back(rem);
        sum /= 10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
*/

/*
// Optimised Soln
// T.C => O(n+n) => O(n)
// S.C => O(1)
#include <bits/stdc++.h> 
vector<int> findArraySum(vector<int>&a, int n, vector<int>&b, int m) {
    vector<int> sum;
    int carry = 0, i = n-1, j = m-1;
    while(i >= 0 || j >= 0 || carry) {
        carry += (i >= 0) ? a[i--] : 0;
        carry += (j >= 0) ? b[j--] : 0;
        sum.push_back(carry % 10);
        carry /= 10;
    }
    reverse(sum.begin(), sum.end());
    return sum;
}
*/

Topic Tag : 
ARRAY   MATH
