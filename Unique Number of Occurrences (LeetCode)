// BruteForce Solution without modifying the array
// T.C => O(n(n+n(n)) + n*n) => O(n(n+n^2) + n^2) => O(n^3 + n^2) => O(n^3)
// S.C => O(1)
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        int n = arr.size();
        vector<int> ans; // for storing no of occurren of unique elements
        int indexOfVect = 0; // for noting the index of ans vector which is to be usde later for checking same elements present or not
        if(n == 1) return true;
        for(int i = 0; i < n-1; i++) {
            int count = 1; // for counting each elements count
            int prevExists = 0; // for checking whether current elements has been used for counting previously or no if used no need to use again.
            for(int k = i; k > 0; k--) { // loop for checking whether current elements has been used for counting previously or not
                if(arr[i] == arr[k-1]) {
                    prevExists = 1;
                    break;
                }
            }
            for(int j = i+1; j < n; j++) {
                if(i == n-2 && j == n-1) { // last element check whether it has been used previously or not if not then we go ahead with if statement.
                    if(arr[n-1] != arr[n-2]) { // for checking whether last and previous to last elements are equal or not if equal it will be used below and if not then we go ahead with for loop to check whether any same elementsfrom 0 to n-3 exists or not  if not then this is a single element which is present at end so we push its number of occurren i.e. 1.
                        int lastEleChk = 0;
                        for(int k = j; k > 0; k--) {
                            if(arr[j] == arr[k-1]) {
                                lastEleChk = 1;
                                break;
                            }
                        }
                        if(lastEleChk == 0) {
                            ++indexOfVect;
                            ans.push_back(1);
                            break;
                        }
                    }
                }
                if(arr[i] == arr[j]) {
                    ++count;
                }
            }
            if(prevExists == 0) {
                ++indexOfVect;
                ans.push_back(count);
            }
        }
        
        for(int i = 0; i < indexOfVect - 1; i++) {
            for(int j = i+1; j < indexOfVect; j++) {
                if(ans[i] == ans[j]) return 0;
            }
        }
        return 1;
    }
};


// Optimized Soln
// T.C => O(n)
// S.C => O(n + n) => as one map and one set is used 
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int,int> mp;
        for(int i : arr) {
            mp[i]++; // mp[i]++ => mp[i] = mp[i] + 1; 
        }
        set<int> s;
        for(auto it : mp) { //unordered_map<int,int> :: iterator it; 
                           // for(it = mp.begin(); it != mp.end(); it++) 
            if(s.count(it.second) == 1) return false;
            else s.insert(it.second);
        }
        return true;
    }
};
