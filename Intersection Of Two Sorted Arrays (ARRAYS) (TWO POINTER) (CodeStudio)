Problem Link : 
https://www.codingninjas.com/codestudio/problems/intersection-of-2-arrays_1082149?source=youtube&campaign=love_babbar_codestudio1&utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_codestudio1&leftPanelTab=0

Description : 
You are given two arrays 'A' and 'B' of size 'N' and 'M' respectively. Both these arrays are sorted in non-decreasing order. You have to find the intersection of these 
two arrays.
Intersection of two arrays is an array that consists of all the common elements occurring in both arrays.
Note:
1. The length of each array is greater than zero.
2. Both the arrays are sorted in non-decreasing order.
3. The output should be in the order of elements that occur in the original arrays.
4. If there is no intersection present then return an empty array.

Constraints:
1 <= T <= 100
1 <= N, M <= 10^4
0 <= A[i] <= 10^5
0 <= B[i] <= 10^5
Time Limit: 1 sec
Follow Up:
Can we solve this problem using the time complexity of O(max(N, M)).

Sample Input 1 :
2
6 4
1 2 2 2 3 4
2 2 3 3
3 2
1 2 3
3 4  
Sample Output 1 :
2 2 3
3   

Sample Input 2 :
2
3 3 
1 4 5
3 4 5
1 1
3
6
Sample Output 2 :
4 5
-1

Source Code :
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m) {
    /* Optimised Solution: 
     int i = 0, j = 0;
   // int n = arr1.size();
   // int m = arr2.size();
    vector<int> ans;
    while(i < n && j < m) {
      if(arr1[i] == arr2[j]) {
          ans.push_back(arr1[i]);
          i++;
          j++;
      }
      else if(arr1[i] > arr2[j]) {
          j++;
      }
    
      if(arr1[i] < arr2[j]) {
          i++;
      }
               
    }
    return ans;
    */

    
    /*
    // Optimal Soln
    // T.C => O(n) 
    // S.C => O(1)
    int i = 0, j = 0;
    vector<int> ans;
    while(i < n && j < m) {
        if(arr1[i] == arr2[j]) {
            ans.push_back(arr1[i]);
            i++; j++;
        }
        else if(arr1[i] < arr2[j]) i++;
        else j++;
    }
    return ans;
    */
    
    /*
    // BruteForce Soln :: TLE Soln
    // T.C => O(n^2) 
    // S.C => O(1)
    vector<int> ans;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(arr1[i] == arr2[j]) { 
                ans.push_back(arr1[i]);
                arr2[j] = -1;
                break;
            }
        }
    }
    return ans;
    */    
}
