Problem Link :
https://leetcode.com/problems/search-insert-position/description/

Description :
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted 
in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
 
Constraints:
1 <= nums.length <= 10^4
-10^4 <= nums[i] <= 10^4
nums contains distinct values sorted in ascending order.
-10^4 <= target <= 10^4

Source Code :
package com.practice;
import java.util.Scanner;

class Solution {
    // BF Soln : find greater or equal to target index and return it.
    // T.C => O(n)
    // S.C => O(1)
    public int searchInsert(int [] num, int target) {
        for(int i = 0; i  < num.length; i++) {
            if(num[i] >= target) return i;
        }
        return num.length;
    }

    // Optimal Soln : Use Binary Search
    // T.C => O(logn)
    // S.C => O(1)
    public int searchInsert1(int nums[], int target) {
        int s = 0, e = nums.length-1, ans = 0;
        while(s <= e) {
            int mid = (s+e)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] > target) {
                ans = mid;
                e = mid-1;
            }
            else {
                ans = mid+1;
                s = mid+1;
            }
        }
        return ans;
    }

    // Optimal Soln : Use Binary Search :: This Code is better than above
    // T.C => O(logn)
    // S.C => O(1)
    public int searchInsert2(int nums[], int target) {
        int s = 0, e = nums.length-1;
        while(s <= e) {
            int mid = (s+e)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] > target) e = mid-1;
            else s = mid+1;
        }
        return s;
    }
}

public class practiceQuestion {
    public static void main(String [] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int target = sc.nextInt();
        int [] num = new int[n];
        for(int i = 0; i < n; i++) {
            num[i] = sc.nextInt();
        }
        Solution s = new Solution();
//        int ans = s.searchInsert(num, target);
//        int ans = s.searchInsert1(num, target);
        int ans = s.searchInsert2(num, target);
        System.out.println(ans);
    }
}

TOPIC TAGS :
ARRAYS           BINARY SEARCH

