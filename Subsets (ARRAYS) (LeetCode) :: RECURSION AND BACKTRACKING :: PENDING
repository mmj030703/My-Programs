Problem Link :
https://leetcode.com/problems/subsets/description/

Description :
Given an integer array nums of unique elements, return all possible 
subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

Source Code :
package com.practice;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

class Solution {

    // Approach :: Here we use concept of bit masking where we know for a n size array we have
    //             pow(2,n) subsets so we can create all these subsets using binary representation
    //             i.e for the array of size 3 we have 8 subsets and these 8 subsets can be
    //             represented using binary representation i.e from 0 till 7 i.e bit mask of 0 till
    //             bit mask of 7.
    //             Bit Mask for a array of size 3
    //             0 ->  0 0 0
    //             1 ->  0 0 1
    //             2 ->  0 1 0
    //             3 ->  0 1 1
    //             4 ->  1 0 0
    //             5 ->  1 0 1
    //             6 ->  1 1 0
    //             7 ->  1 1 1
    //
    // 1) Create a list of list of integers and initialize it by giving some initial capacity.
    // 2) Start the two nested loops outer i loop running from 0 till pow(2,n)-1 times and this i
    //    indicates the bit masks. i.e if array is [1,2,3] then the binary equivalent of 0
    //    i.e 000 is one bit mask, the binary equivalent of 1 is 001 it the second bit mask till...
    //    pow(2,n)-1 i.e 7 it's binary equivalent is 111.
    // 3) The inside loop will run from 0 to n-1 i.e throughout the array and create a list of integers
    //    which will store current subset and inside this loop we will
    //    check from lsb i.e first bit i.e from right the first bit we will do logical ANDing with 1
    //    and check if we have a set bit i.e a 1 bit or not if we have 1 bit in that bit position then
    //    for the same position in the array we will put that element in the the current subset list.
    // 4) After the inside loop is over we come out of the inner loop and store the current subset
    //    list into list of list of integers ans.

    // Better than BF Soln :: Using Bit Manipulation
    // T.C => O(2^n * n)
    // S.C => O(2^n)
    public List<List<Integer>> subsets(int [] nums) {
        int n = nums.length;
        List<List<Integer>> subsets = new ArrayList<List<Integer>>(1<<n);
        for(int i = 0; i < (1<<n); i++) {
            List<Integer> l = new ArrayList<Integer>(n);
            for(int j = 0; j < n; j++) {
                if((i & (1<<j)) != 0) {
                    l.add(nums[j]);
                }
            }
            subsets.add(l);
        }
        return subsets;
    }

}

class practiceQuestion {
    public static void main(String [] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int [] nums = new int[n];
        for(int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        Solution s = new Solution();
        List<List<Integer>> ans = s.subsets(nums);
        for(List<Integer> l : ans) {
            System.out.println(l);
        }
    }
}

Topic Tags :: 
ARRAYS           RECURSION               BACKTRACING                    BIT MANIPULATION
