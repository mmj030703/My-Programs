Problem Link : 
https://practice.geeksforgeeks.org/problems/prime-number2314/1

Description : 
For a given number N check if it is prime or not. A prime number is a number which is only divisible by 1 and itself.
 

Example 1:

Input:
N = 5
Output:
1
Explanation:
5 has 2 factors 1 and 5 only.
Example 2:

Input:
N = 25
Output:
0
Explanation:
25 has 3 factors 1, 5, 25

Your Task:
You don't need to read input or print anything. Your task is to complete the function isPrime() which takes an integer N as input parameters and returns an integer, 1 if N is a prime number or 0 otherwise.
 

Expected Time Complexity: O(sqrt(N))
Expected Space Complexity: O(1)
 

Constraints:
1 <= N <= 10^9

Source Code : 
//{ Driver Code Starts
#include<bits/stdc++.h> 
using namespace std;

// } Driver Code Ends

/*
// BruteForce Soln
// T.C => O(N)
// S.C => O(1)
class Solution{
public:
    int isPrime(int N){
        int countDivisors = 0;
        if(N == 1) return 0;
        for(int i = 1; i <= N; i++) {
            if(N % i == 0) ++countDivisors;
            if(countDivisors > 2) return 0;
        }
        return 1;
    }
};
*/

// Optimal Soln
// T.C => O(sqrt(N))
// S.C => O(1)
class Solution{
public:
    int isPrime(int N){
        int countDivisors = 0;
        if(N == 1) return 0;
        for(int i = 1; i <= sqrt(N); i++) { // i <= sqrt(N) can also be written as
            if(N % i == 0) {                // i * i <= N -> it is a good way of 
                ++countDivisors;            // writing by avoiding func call to sqrt
                if(N / i != i) ++countDivisors;
            }
            if(countDivisors > 2) return 0;
        }
        return 1;
    }
};

// Optimal Soln in more optimized form
// T.C => O(sqrt(N))
// S.C => O(1)
class Solution{
public:
    int isPrime(int N){
        if(N == 1) return 0;
        for(int i = 2; i <= sqrt(N); i++) { // i <= sqrt(N) can also be written as
            if(N % i == 0)                  // i * i <= N -> it is a good way of 
                return 0;                   // writing by avoiding func call to sqrt
        }
        return 1;
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N;
        cin>>N;
        Solution ob;
        cout << ob.isPrime(N) << endl;
    }
    return 0; 
}
// } Driver Code Ends
