Problem Link : 
https://leetcode.com/problems/unique-number-of-occurrences/description/

Description :
Given an array of integers arr, return true if the number of occurrences of each value in the array is unique, or false otherwise.

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

Constraints:
1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000

Source Code :
/*
// Better than BruteForce Soln
// T.C => O(nlogn + n + nlogn + n) => O(nlogn)
// S.C => O(n)
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        sort(arr.begin(), arr.end());
        vector<int> occurrence;
        int count = 1, ind = 0;
        
        for(int i = 1; i < arr.size(); i++) {
            if(arr.size() == 2 && arr[i] != arr[i-1]) {
                occurrence.push_back(1);
                ++ind;
            }

            if(arr[i] == arr[i-1]) {
                ++count;
            }
            else {
                occurrence.push_back(count);
                ++ind;
                count = 1;
            }
        }
        
        sort(occurrence.begin(), occurrence.end());
        for(int i = 1; i < ind; i++) {
            if(occurrence[i] == occurrence[i-1]) return false;
        }
        return true;
    }
};
*/

/*
Optimal Soln
// T.C => O(n) + O(n) => O(n)
// S.C => O(n + n)
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int, int> mp;
        unordered_set<int> s;
        int n = arr.size();
        for(int i = 0; i < n; i++) {
            mp[arr[i]]++;
        }
        for(pair<int, int> i : mp) {
            if(s.find(i.second) != s.end()) return false;
            s.insert(i.second);
        }
        return true;
    }
};
*/

/*
// Optimal Soln
// T.C => O(n + n) => O(n)
// S.C => O(n + n) => O(n)
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int, int> mp;
        unordered_map<int, int> :: iterator it;
        set<int> occur;
        for(int i = 0; i < arr.size(); i++) {
            mp[arr[i]]++;
        }
        
        for(auto it : mp) {
            if(occur.count(it.second)) {
                return false;
            }
            else {
                occur.insert(it.second);
            }
        }
        return true;
    }
};
*/
