CodeStudio Link :
https://www.codingninjas.com/codestudio/problems/triplets-with-given-sum_893028?source=youtube&campaign=LoveBabbar_Codestudiovideo1&utm_source=youtube&utm_medium=affiliate&utm_campaign=LoveBabbar_Codestudiovideo1&leftPanelTab=1

LeetCode Link : 
https://leetcode.com/problems/3sum/description/

Description : 
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Input 1 : nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input 2 : nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input 3 : nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 
Constraints:
3 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5

Source Code :
#include <bits/stdc++.h> 
vector<vector<int>> findTriplets(vector<int>arr, int n, int K) {
    /*
    // BruteForce Soln :: TLE Soln :: 1st Approach
    // T.C => O(n^3)
    // S.C => O(n)
    vector<vector<int>> ans;
    set<vector<int>> s;
    for(int i = 0; i < arr.size()-2; i++) {
        for(int j = i+1; j < arr.size()-1; j++) {
            for(int k = j+1; k < arr.size(); k++) {
                if(arr[i] + arr[j] + arr[k] == K) {
                    vector<int> temp;
                    temp.push_back(arr[i]);
                    temp.push_back(arr[j]);
                    temp.push_back(arr[k]);
                    sort(temp.begin(), temp.end()); // imp as the order in set is 
                    if(s.find(temp) == s.end()) {   // is mainatined so it is easy
                        ans.push_back(temp);        // to search
                        s.insert(temp);
                    }
                }
            }
        }
    }
    return ans;
    */
    
    /* Optimised Soln :: 3Sum using 2Sum approach :: 3rd Approach
    // T.C => O(n^2)  // two while loops in inner loop are negligible
    // S.C => O(1)
    sort(arr.begin(), arr.end());
    vector<vector<int>> ans;
    for(int i = 0; i < n-2; i++) {
        if(i == 0 || (arr[i] != arr[i-1])) {
            int sum = K - arr[i];
            int s = i+1, e = n-1;
            while(s < e) {
                if(arr[s] + arr[e] == sum) {
                    ans.push_back({arr[i], arr[s], arr[e]});
                    while(s < e && (arr[s] == arr[s+1])) s++;
                    while(s < e && (arr[e] == arr[e-1])) e--;
                    s++; e--;
                }
                else if(arr[s] + arr[e] < sum) s++;
                else e--;
            }
        }
    }
    return ans;
    */
    
    /*
    // 2nd Approach : Better than BruteForce Soln :: Using Hashing (HashMaps and Set)
    // TLE Soln
    // T.C => O(n + n^2) => O(n^2)
    // S.C => O(n + n) => O(n)
    vector<vector<int>> ans;
    unordered_map<int , int> mp;
    set<vector<int>> s;
    for(int i = 0; i < n; i++) mp[arr[i]]++;
    for(int i = 0; i < n-1; i++) {
        mp[arr[i]]--;
        for(int j = i+1; j < n; j++) {
            int sum = K - (arr[i]+arr[j]);
            mp[arr[j]]--;
            if(mp[sum] > 0) {
                vector<int> visited;
                visited.push_back(arr[i]);
                visited.push_back(arr[j]);
                visited.push_back(sum);
                sort(visited.begin(), visited.end());
                if(s.find(visited) == s.end()) {
                    ans.push_back(visited);
                    s.insert(visited);
                }
            }
            mp[arr[j]]++;
        }
        mp[arr[i]]++;
    }
    return ans;
    */
}

TOPIC TAGS :
ARRAYS      TWO POINTER
