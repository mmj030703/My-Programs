Problem Link : 
https://leetcode.com/problems/merge-intervals/description/

Description : 
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover 
all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 
Constraints:
1 <= intervals.length <= 10^4
intervals[i].length == 2
0 <= start[i] <= end[i] <= 10^4

Source Code :
class Solution {
    // Optimal Soln
    // T.C => O(nlogn + n) => O(nlogn)
    // S.C => O(n)
    /*
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a,b) -> Integer.compare(a[0],b[0]));
        
        ArrayList< int[] > list = new ArrayList<>(); 
        int [] prevInterval = intervals[0];
        for(int [] currInterval : intervals) {
            if(currInterval[0] <= prevInterval[1]) {
                prevInterval[1] = Math.max(prevInterval[1], currInterval[1]);
            }
            else {
                list.add(prevInterval);
                prevInterval = currInterval;
            }
        }
        list.add(prevInterval);
        return list.toArray(new int[list.size()][2]);
    }
    */
}

TOPIC TAGS :
ARRAYS            SORTING
