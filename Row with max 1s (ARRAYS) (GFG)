Problem Link : 
https://practice.geeksforgeeks.org/problems/row-with-max-1s0023/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=row-with-max-1s

Description :
Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Example 1:
Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).

Example 2:
Input: 
N = 2, M = 2
Arr[][] = {{0, 0}, {1, 1}}
Output: 1
Explanation: Row 1 contains 2 1's (0-based
indexing).

Your Task:  
You don't need to read input or print anything. Your task is to complete the function rowWithMax1s() which takes the array of booleans arr[][], n and m as input 
parameters and returns the 0-based index of the first row that has the most number of 1s. If no such row exists, return -1. 

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N, M ≤ 10^3
0 ≤ Arr[i][j] ≤ 1 

Source Code :
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++
class Solution{
public:
    /*
    // BF Soln
    // T.C => O(n*m)
    // S.C => O(1)
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    int maxInd = -1, maxOnes = 0;
	    for(int i = 0; i < n; i++) {
	        int oneCount = 0; 
	        for(int j = 0; j < m; j++) {
	            if(arr[i][j] == 1) oneCount++;
	        }
	        if(oneCount > maxOnes) {
	            maxOnes = oneCount;
	            maxInd = i;
	        }
	    }
	    return maxInd;
	}
	*/
	
	/*
	// Same time and space complexity as above approach
	// this code has some sort of optimizations
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
      int maxInd = -1, maxOnes = 0;
	  for(int i = 0; i < n; i++) {
	      int oneCount = 0; 
	      for(int j = 0; j < m; j++) {
	          if(arr[i][j] == 1) {
	              oneCount = m - j;
	              break;
	          }
	          else if(arr[i][m-1] == 0) {
	              break;
	          }
	          else if(arr[i][j] != arr[i][j+1]) {
	              oneCount = m - (j+1);
	              break;
	          }
	      }
	      if(oneCount > maxOnes) {
	          maxOnes = oneCount;
	          maxInd = i;
	      }
	  }
	  return maxInd;
	}
	*/

    /*
    // Optimal Soln
    // T.C => O(n + m)
    // S.C => O(1)	
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    int maxInd = -1, maxOnes = 0, countOnes = 0;
	    int i = 0, j = 0;
	    while(i < n) {
	        if(arr[i][0] == 1) return i;
	        else if(arr[i][m-1] == 0) i++;
	        else if(arr[i][j] != arr[i][j+1]) {
	            countOnes = m - (j+1);
	            if(countOnes > maxOnes) {         
	                maxOnes = countOnes;
	                maxInd = i;
	            }
	            countOnes = 0;
	            i++;
	            j = 0;
	        }
	        else j++;
	    }
	    return maxInd;
	}
	*/
	
	/*
	// Optimal Soln :: Most Optimal Soln :: Taken Help from Video
    // T.C => O(n + m)
    // S.C => O(1)
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    int maxInd = -1;
	    int i = 0, j = m-1;
	    while(i < n && j >= 0) {
	        if(arr[i][j] == 1) {
	            maxInd = i;
	            j--;
	        }
	        else i++;
	    }
	    return maxInd;
	}
	*/
};





















//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector< vector<int> > arr(n,vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin>>arr[i][j];
            }
        }
        Solution ob;
        auto ans = ob.rowWithMax1s(arr, n, m);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends

TOPIC TAGS :
Arrays                Matrix              Data Structures
