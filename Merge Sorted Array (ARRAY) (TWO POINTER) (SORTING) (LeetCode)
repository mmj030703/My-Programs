Problem Link : 
https://leetcode.com/problems/merge-sorted-array/description/

Description : 
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Example 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 
Constraints:
nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-10^9 <= nums1[i], nums2[j] <= 10^9
 
Follow up: Can you come up with an algorithm that runs in O(m + n) time?

Source Code :
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        /* Approach 1
        // BruteForce Soln
        // T.C => O(n + nlogn) => O(nlogn)
        // S.C => O(1)
        for(int i = m, j = 0; i < m+n; i++,j++) {
            nums1[i] = nums2[j];
        }
        sort(nums1.begin(), nums1.end());
        */

        /* Approach 2
        // Not Optimised Approach
        // T.C => O(mlogm + nlogn + n^2) => O(n^2)
        // S.C => O(n)
        map<int, int> mp;
        for(int i = 0; i < m; i++) mp[nums1[i]]++;
        for(int i = 0; i < n; i++) mp[nums2[i]]++;
        int j = 0;
        for(pair<int, int> i : mp) {
            int count = i.second;
            while(count--) {
                nums1[j++] = i.first;
            }
        }
        */    

        /* Approach 3
        // We have used the concept of insertion sort here in inner loop
        // Not Optimised Soln 
        // T.C => O(n^2)
        // S.C => O(1)
        for(int i = 0; i < n; i++) {
            int element = nums2[i];
            int j = m-1;
            while(j >= 0) {   // insertion sort starts from here
                if(element < nums1[j]) {
                    nums1[j+1] = nums1[j];
                    j--;
                }
                else {
                    break;
                }
            }
            nums1[j+1] = element;
            m++; // incrementing m by 1 so as to increase search space of
        }        // nums2[] by one.
        */


        /*
        // Approach 4 :: Two Pointer :: Optimised in Approach 5
        // Here we are storing elements in sortef fashion in forward way.
        // T.C => O(n + n) => O(n)
        // S.C => O(n) 
        int i = 0, j = 0, k = 0;
        vector<int> nums3(m+n);
        while(i < m && j < n) {
            if(nums1[i] < nums2[j] || nums1[i] == nums2[j]) {
                nums3[k] = nums1[i];
                k++; i++;
            }
            else if(nums1[i] > nums2[j]){
                nums3[k] = nums2[j];
                k++; j++;
            }
        }
        while(i < m) {
            nums3[k] = nums1[i];
            k++; i++; 
        }
        while(j < n) {
            nums3[k] = nums2[j];
            k++; j++;
        }
        nums1 = nums3;
        */

        /* Approach 5
        // Optimised Soln :: Two Pointer :: Approach same as Approach 4
        // but in reverse way
        // We are traversing reversely in both arrays using two pointer and
        // storing elements in first array itself
        // T.C => O(n + n) => O(n) // in the last two loops only one will be
        // S.C => O(1)             // running as one of the condition is false
        int i = m-1, j = n-1, k = m+n-1;
        while(i >= 0 && j >= 0) {
            if(nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            }
            else {
                nums1[k--] = nums2[j--];
            }    
        }
        while(i >= 0) {
            nums1[k--] = nums1[i--];
        }
        while(j >= 0) {
            nums1[k--] = nums2[j--];
        }
        */
    }
};
