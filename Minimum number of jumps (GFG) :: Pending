Problem Link : 
https://practice.geeksforgeeks.org/problems/minimum-number-of-jumps-1587115620/1

LeetCode Similar Qn : JUMP GAME1 : https://leetcode.com/problems/jump-game/ 
& JUMP GAME 2 : https://leetcode.com/problems/jump-game-ii/

Description : 
Given an array of N integers arr[] where each element represents the max length of the jump that can be made forward from that element. 
Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

Note: Return -1 if you can't reach the end of the array.

Example 1:

Input:
N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 
Output: 3 
Explanation: 
First jump from 1st element to 2nd 
element with value 3. Now, from here 
we jump to 5th element with value 9, 
and from here we will jump to the last. 
Example 2:

Input :
N = 6
arr = {1, 4, 3, 2, 6, 7}
Output: 2 
Explanation: 
First we jump from the 1st to 2nd element 
and then jump to the last element.

Your task:
You don't need to read input or print anything. Your task is to complete function minJumps() which takes the array arr and it's size N as input parameters and 
returns the minimum number of jumps. If not possible return -1.

Expected Time Complexity: O(N)
Expected Space Complexity: O(1)

Constraints:
1 ≤ N ≤ 107
0 ≤ arri ≤ 107

Source Code :
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// Function to return minimum number of jumps to end of array

/*
Edge Cases : 
1) when first element is 0 eg: 0 1 5 2 4
2) when two zeroes in between and can't move eg: 1 3 0 0 1 0 2
*/

/*
// This is an inaccurate solution as many test case fails due to this approach
// T.C => O(n^2)
// S.C => O(1)
   class Solution{
     public:
       int minJumps(int arr[], int n){
           int s = 0, jumps = 0, minJumps = 0;
           while(s < n) {
               if(arr[s] == 0) {
                   return -1;
               }
               jumps = arr[s];
               for(int i = 1; i <= jumps; i++) s++;
               minJumps++;
           }
           return minJumps;
       }
   };
*/

// BruteForce Soln is using Recursion


/* Just for reference as not my written code
// Optimal Sol :: Code taken from Discussion Forum
// T.C =>O(n)
// S.C => O(1)
    class Solution {
     public:
        int minJumps(int arr[], int n) {
            if(n == 1) return 0;
            if(arr[0] == 0) return -1;
            
            int range = 0;
            int pos = 0;
            int jump = 0;
            
            for(int i = 0; i < n-1; i++) {
                range = max(range, arr[i]+i);
                if(pos == i) {
                    pos = range;
                    jump++;
                }
                if(pos <= i) return -1;
                if(pos >= n) return jump;
            }
            return jump;
    }
};
*/   
   
/*
*
// Optimal Sol :: Written by Me after taking Reference
// T.C =>O(n)
// S.C => O(1)   
class Solution{
 public:
    int minJumps(int arr[], int n){
        //int maxDist(range) = 0;
        int maxDist = 0, currPos = 0, jump = 0;
        if(n == 1) return 0;
        if(arr[0] == 0) return -1;
    
        for(int i = 0; i < n-1; i++) {
            maxDist = max(maxDist, arr[i] + i);
            if(currPos == i) {
                ++jump;
                currPos = maxDist;
            }
            if(currPos <= i) return -1;
            if(currPos >= n) return jump;
        }
        return jump;
    }
};
*/
//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,i,j;
        cin>>n;
        int arr[n];
        for(int i=0; i<n; i++)
            cin>>arr[i];
        Solution obj;
        cout<<obj.minJumps(arr, n)<<endl;
    }
    return 0;
}

// } Driver Code Ends
