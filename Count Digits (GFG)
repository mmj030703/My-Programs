Problem Link : https://practice.geeksforgeeks.org/problems/count-digits5716/1

Description :
Given a number N. Count the number of digits in N which evenly divides N.

TestCase 1 :
Example 1:

Input:
N = 12
Output:
2
Explanation:
1, 2 both divide 12 evenly
Example 2:

Input:
N = 23
Output
0
Explanation:
2 and 3, none of them
divide 23 evenly

Expected Time Complexity: O(log N)
Expected Space Complexity: O(1)
 
Source Code :

//{ Driver Code Starts
#include<bits/stdc++.h> 
using namespace std;

// } Driver Code Ends
class Solution{
public:
    // Optimal Soln :
    // T.C => O(logn) as we are not traversing n times and we are dividing n by 10
    //                so we are able to do so with log to the base 10 n i.e. O(logn). 
    // S.C =>O(1)
    int evenlyDivides(int N){
        
        int count = 0, digit, temp = N;
        while(temp != 0) {
            digit = temp % 10;
            if(digit == 0) {
                temp /= 10;
                continue;
            }
            if(N % digit == 0) {
                count++;
            }
            temp /= 10;
        }
        return count;
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N;
        cin>>N;
        Solution ob;
        cout << ob.evenlyDivides(N) << endl;
    }
    return 0; 
}
// } Driver Code Ends


// Some Good Methods to find no of Digits in a number: using log10() function
// log to base 10 of any number gives answer as the whole digits - 1; eg :- 1657 => log10(1657) => 3.21... => taking it's int part we get 3 and add 1 we get tot digits 
#include<bits/stdc++.h>

using namespace std;

int count_digits( int n )
{
  int digits = floor(log10(n) + 1);
  return digits;
}

int main()
{
   int n = 12345;
   cout<< "Number of digits in "<<n<<" is "<<count_digits(n);
   return 0;
}
