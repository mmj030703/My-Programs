Problem Link :
https://practice.geeksforgeeks.org/problems/max-sum-in-sub-arrays0824/0?category=&utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=max-sum-in-sub-arrays

Description :
Given an array, find maximum sum of smallest and second smallest elements chosen from all possible sub-arrays. More formally, if we write all (nC2) sub-arrays of 
array of size >=2 and find the sum of smallest and second smallest, then our answer will be maximum sum among them.
 
Image Explanation :
https://github.com/mmj030703/My-Programs/issues/3
 
Example 1:
Input : arr[] = [4, 3, 1, 5, 6]
Output : 11
Subarrays with smallest and 
second smallest are,
[4, 3]        
smallest = 3    second smallest = 4
[4, 3, 1]    
smallest = 1    second smallest = 3
[4, 3, 1, 5]    
smallest = 1    second smallest = 3
[4, 3, 1, 5, 6]    
smallest = 1    second smallest = 3
[3, 1]         
smallest = 1    second smallest = 3
[3, 1, 5]     
smallest = 1    second smallest = 3
[3, 1, 5, 6]    
smallest = 1    second smallest = 3
[1, 5]        
smallest = 1    second smallest = 5
[1, 5, 6]    
smallest = 1    second smallest = 5
[5, 6]         
smallest = 5    second smallest = 6
Maximum sum among all 
above choices is, 5 + 6 = 11
 
Example 2:
Input : arr[] = {5, 4, 3, 1, 6} 
Output : 9
 
Your Task:  
You don't need to read input or print anything. Your task is to complete the function pairWithMaxSum() which takes the array Arr[] and its size N as inputs and 
returns the maximum sum of smallest and second smallest elements chosen from all possible subarrays.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
2 ≤ N ≤ 10^5
1 ≤ A[i] ≤ 10^18

Source  Code :
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

// } Driver Code Ends


class Solution{
    public:
    /*
    // BruteForce Soln :: TLE Soln
    // T.C => O(n^3)
    // S.C => O(1)
    long long pairWithMaxSum(long long arr[], long long N) {
        long long maxSum = 0;
        for(int i = 0; i < N-1; i++) {
            for(int j = i+1; j < N; j++) {
                long long small = INT_MAX, secSmall = INT_MAX;
                for(int k = i; k <= j; k++) {
                    if(arr[k] <= small) {
                        secSmall = small;
                        small = arr[k];
                    }
                    else if(arr[k] < secSmall && arr[k] != small) {
                        secSmall = arr[k];
                    }
                }
                if(small + secSmall > maxSum) maxSum = small + secSmall;
            }
        }
        return maxSum;
    }
    */
    
    /*
    // Better than BruteForce Soln
    // T.C => O(n * (nlogn)) => O(n^2 * logn)
    // S.C => O(n)
    long long pairWithMaxSum(long long arr[], long long N) {
        int i = 0, j = 1;
        long long maxSum = 0;
        while(i < N-1) {
            vector<int> v; // creating space for putting current subarray 
            v.insert(v.begin(), arr+i, arr+j+1); // ele in vector v;
            sort(v.begin(), v.end());
            long long small = v.at(0), secSmall = v.at(1);
            if(small + secSmall > maxSum) maxSum = small + secSmall;
            if(j == N-1) {
                i++; j = i+1;
            }
            else j++;
        }
        return maxSum;
    }
    */
    
    /*
    // Better than BruteForce Soln
    // T.C => O(n^2)
    // S.C => O(n)
    long long pairWithMaxSum(long long arr[], long long N) {
        int i = 0, j = 1;
        long long maxSum = 0;
        while(i < N-1) {
            vector<int> v; // creating space for putting current subarray 
            v.insert(v.begin(), arr+i, arr+j+1); // ele in vector v;
            long long small = INT_MAX, secSmall = INT_MAX;
            for(int i = 0; i < v.size(); i++) {
                if(v[i] <= small) {
                    secSmall = small;
                    small = v[i];
                }
                else if(v[i] < secSmall && v[i] != small) {
                    secSmall = v[i];
                }
            }
            if(small + secSmall > maxSum) maxSum = small + secSmall;
            if(j == N-1) {
                i++; j = i+1;
            }
            else j++;
        }
        return maxSum;
    }
    */
    
    /*
    // Optimal Soln
    // T.C => O(n)
    // S.C => O(1)
    long long pairWithMaxSum(long long arr[], long long N) {
        long long maxSum = INT_MIN;
        for(int i = 0; i < N-1; i++) {
            if(arr[i] + arr[i+1] > maxSum) maxSum = arr[i]+arr[i+1];
        }
        return maxSum;
    }
    */
};


//{ Driver Code Starts.
int main() 
{
	ll t;
	cin>>t;
	while(t--)
	{
		ll n;
		cin>>n;
		ll a[n];
	    for(ll i=0;i<n;i++)
		    cin>>a[i];
		Solution ob;
	    cout<<ob.pairWithMaxSum(a,n)<<endl;
	}
	return 0;
}
// } Driver Code Ends


TOPIC TAGS : 
ARRAYS    OBSERVATION

