Problem Link : 
https://leetcode.com/problems/rotate-image/description/

Description : 
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
// Org Matrix        Transpose Matrix
5   1  9 11          5   2   13   15 
2   4  8 10   ==>    1   4    3   14
13  3  6  7          9   8    6   12
15 14 12 16          11  10   7   16
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 

Constraints:
n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

Source Code :
/*
// Not Optimised Soln
// T.C => O(row*col)
// S.C => O(row*col)
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        vector<vector<int>> rotate(matrix);
        for(int i = 0; i < row; i++) {
            for(int j = col-1; j >= 0; j--) {
                rotate[i][col-1-j] = matrix[j][i];
            }
        }   
        matrix = rotate;
    }
};
*/
// For the above same t.c and s.c another approach of spiral matrix printing
// exist can be used to solve


// Here we first find the transpose and then reverse all rows 
// dry run once approach will be cleared.
// Optimal Soln
// T.C => O(n + n^2) => O(n^2)
// S.C => O(1)
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        // Transposing Array Elements
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < i; j++) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        // Reversing All Rows of Matrix
        for(int i = 0; i < rows; i++) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Code in Java
// Rotate 2D Array by 90 Degree
package com.practice;
import java.util.Collections;
import java.util.Scanner;

class javaPrac2 {
    // BruteForce Soln :: Creating New 2D array and by observation placing matrix elements into new
    //                    2d Array
    // T.C => O(n*m + n*m) => O(n*m)
    // S.C => O(n*m)
    public static void rotate90Deg(int [][] matrix) {
        int[][] ans = new int[matrix.length][matrix[0].length];
        for (int i = matrix.length - 1; i >= 0; i--) {
            for (int j = 0; j < matrix[0].length; j++) {
                ans[j][i] = matrix[matrix.length - 1 - i][j];
            }
        }
        for (int i = 0; i < ans.length; i++) {
            for (int j = 0; j < ans[0].length; j++) {
                matrix[i][j] = ans[i][j];
            }
        }
    }

    // Optimal Soln :: First Transpose of Matrix then reverse all arrays of matrix
    // T.C => O(n^2 + n^2) => O(n^2)
    // S.C => O(1)
    public static void reverse(int [] arr) {
        int start = 0, end = arr.length-1;
        while(start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    public static void rotate90Deg1(int [][] matrix) {
            for(int i = 0; i < matrix.length; i++) {
                for(int j = 0; j < i; j++) {
                    int temp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = temp;
                }
            }
            for(int [] arr : matrix) {
                reverse(arr);
            }
    }

    public static void main(String [] args) {
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int col = sc.nextInt();
        int [][] matrix = new int[row][col];
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
//        rotate90Deg(matrix);
//        rotate90Deg1(matrix);
        for(int [] arr : matrix) {
            for(int i = 0; i < arr.length; i++) {
                System.out.print(arr[i] + " ");
            }
            System.out.println();
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TOPIC TAGS :
2D ARRAY    MATRIX    MATH
