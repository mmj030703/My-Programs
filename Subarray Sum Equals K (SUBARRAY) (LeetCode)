Problem Link : 
https://leetcode.com/problems/subarray-sum-equals-k/description/

Description :
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2
 
Constraints:
1 <= nums.length <= 2 * 10^4
-1000 <= nums[i] <= 1000
-10^7 <= k <= 10^7

Source Code :
class Solution {
public:
    /*
    // BruteForce Soln 
    // T.C => O(n^2)
    // S.C => O(1)
    int subarraySum(vector<int>& nums, int k) {
        int sumCount = 0;
        for(int i = 0; i < nums.size(); i++) {
            int sum = 0;
            for(int j = i; j < nums.size(); j++) {
                sum += nums[j];
                if(sum == k) sumCount++;
            }
        }
        return sumCount;
    }
    */

    // Approach AND Intution in notes of LeetCode
    // Optimal Soln :: Prefix Sum Approach
    // T.C => O(n) 
    // S.C => O(n)
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        mp[0]++;
        int sum = 0, count = 0;
        for(int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            // if(sum == k) count++; // do this if we don't initialize map 
            if(mp[sum-k] > 0) count += mp[sum-k]; // with 0.
            mp[sum]++;
        }
        return count;
    }
};

TOPIC TAGS :
ARRAYS       SUBARRAYS       PREFIX SUM           HASHING

