Problem Link :
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

Description :
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 
Constraints:
1 <= prices.length <= 10^5
0 <= prices[i] <= 10^4

Source Code : 
class Solution {
public:
    /*
    // BF Soln
    // T.C => O(n^2)
    // S.C => O(1)
    int maxProfit(vector<int>& prices) {
        int maxProfit = 0;
        for(int i = 0; i < prices.size()-1; i++) {
            for(int j = i+1; j < prices.size(); j++) {
                if(prices[j] - prices[i] > maxProfit)
                    maxProfit = prices[j] - prices[i];
            }
        }
        return maxProfit;
    }
    */

    // Optimal Soln
    // T.C => O(n)
    // S.C => O(1)
    int maxProfit(vector<int>& prices) {
        int minPrice = INT_MAX, maxProfit = INT_MIN;
        for(int i = 0; i < prices.size(); i++) {
            minPrice = min(minPrice, prices[i]); // finding min value as buy val    
                                                 // should be less
            maxProfit = max(maxProfit, prices[i]-minPrice); // checking with each curr
        }                                                // elem-minimum if we can find
        return maxProfit;                               // max
    }
};


TOPIC TAGS :
ARRAYS          KADANE'S ALGORITHM       DP
