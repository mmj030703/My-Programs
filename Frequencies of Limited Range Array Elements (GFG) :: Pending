Description:
Your task is to count the frequency of all elements from 1 to N.

Input:
N = 5
arr[] = {2, 3, 2, 3, 5}
P = 5
Output:
0 2 2 0 1
Explanation: 
Counting frequencies of each array element
We have:
1 occurring 0 times.
2 occurring 2 times.
3 occurring 2 times.
4 occurring 0 times.
5 occurring 1 time


Source Code:

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std; 
// } Driver Code Ends

// 1. BruteForce Soln :: Using two loops

/* 2. Better than BruteForce Soln
// T.C => O(n+n) => O(n)
// S.C => O(n) as a map is used to store frequencies.
class Solution{
    public:
    //Function to count the frequency of all elements from 1 to N in the array.
    void frequencyCount(vector<int>& arr,int N, int P)
    { 
        unordered_map<int,int> mp;
        unordered_map<int,int> :: iterator it;
        for(int i = 0; i < N; i++) {
            mp[arr[i]]++;
        }
        for(int i = 1; i <= N; i++) {
            if(mp.find(i) != mp.end()) {
                arr[i-1] = mp[i];
            }
            else {
                arr[i-1] = 0;
            }
        }
    }
};
*/

/* 3. Optimal Soln
// T.C => O(n)
// S.C => O(1)
class Solution{
    public:
    //Function to count the frequency of all elements from 1 to N in the array.
    void frequencyCount(vector<int>& arr,int N, int P)
    { 
        
    }
};



//{ Driver Code Starts.

int main() 
{ 
	long long t;
	
	//testcases
	cin >> t;
	
	while(t--){
	    
	    int N, P;
	    //size of array
	    cin >> N; 
	    
	    vector<int> arr(N);
	    
	    //adding elements to the vector
	    for(int i = 0; i < N ; i++){
	        cin >> arr[i]; 
	    }
        cin >> P;
        Solution ob;
        //calling frequncycount() function
		ob.frequencyCount(arr, N, P); 
		
		//printing array elements
	    for (int i = 0; i < N ; i++) 
			cout << arr[i] << " ";
	    cout << endl;
	}	
	return 0; 
}

// } Driver Code Ends
