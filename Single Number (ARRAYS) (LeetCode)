Problem Link :


Description :
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space. 

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

Constraints:
1 <= nums.length <= 3 * 10^4
-3 * 10^4 <= nums[i] <= 3 * 10^4
Each element in the array appears twice except for one element which appears only once.

Source Code :
class Solution {
public:
    /*
    // BruteForce Soln
    // T.C => O(n^2 + n) => O(n^2)
    // S.C => O(n)
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(int i = 0; i < nums.size(); i++) {
            int count = 1;
            if(mp.find(nums[i]) == mp.end()) {
                for(int j = i+1; j < nums.size(); j++) {
                    if(nums[i] == nums[j]) count++;
                }
                mp[nums[i]] = count;
            }
        }
        for(auto i : mp) {
            if(i.second == 1) return i.first;
        }
        return -1;
    }
    */

    /*
    // Better than BruteForce Soln
    // T.C => O(nlogn + n) => O(nlogn)
    // S.C => O(1)
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int count = 1;
        if(nums.size() == 1) return nums[0];
        for(int i = 0; i < nums.size()-1; i++) {
            if(nums[i] == nums[i+1]) count++;
            else if(count == 1) return nums[i];
            else count = 1;
        }
        if(nums[nums.size()-1] != nums[nums.size()-2]) return nums[nums.size()-1];
        return -1;
    }
    */

    /*
    // Better than above Soln
    // T.C => O(n + n) => O(n)
    // S.C => O(n)
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(int i = 0; i < nums.size(); i++) mp[nums[i]]++;
        for(auto i : mp) {
            if(i.second == 1) return i.first;
        }
        return -1;
    }
    */

    /*
    // Optimal Soln :: XOR Approach
    // T.C => O(n)
    // S.C => O(1)
    int singleNumber(vector<int>& nums) {
        int zor = 0;
        for(int i = 0; i < nums.size(); i++) zor ^= nums[i];
        return zor;
    }
    */
};


TOPIC TAGS :
Array               Bit Manipulation



