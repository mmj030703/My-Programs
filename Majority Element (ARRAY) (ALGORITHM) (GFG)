Problem Link :
https://practice.geeksforgeeks.org/problems/majority-element-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=majority-element

LeetCode Link :
https://leetcode.com/problems/majority-element/

Description :
Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times 
in the array.
 
Example 1:
Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in 
{1,2,3} appears only once so there 
is no majority element.

Example 2:
Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present more
than N/2 times, so it is 
the majority element.

Your Task:
The task is to complete the function majorityElement() which returns the majority element in the array. If no majority exists, return -1.
 
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).
 
Constraints:
1 ≤ N ≤ 10^7
0 ≤ Ai ≤ 10^6

Source Code :
//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

/* Approach 1
// BruteForce Soln :: 
// T.C => O(n^2)
// S.C => O(1)
class Solution{
  public:
     // Function to find majority element in the array
    // a: input array
    // size: size of input array
    int majorityElement(int a[], int size) {
        for(int i = 0; i < size; i++) {
            int count = 1;
            for(int j = i+1; j < size; j++) {
                  if(a[i] == a[j]) count++;
            }
            if(count > size/2) return a[i]; 
        }
        return -1;
    }
};
*/

/* Approach 2
// Better tha BruteForce Soln
// T.C => O(nlogn + n) => O(nlogn)
// S.C => O(1)
class Solution {
  public :
    int majorityElement(int a[], int n) {
        sort(a, a+n);        
        int count = 1;
        for(int i = 0; i < n; i++) {
            if(a[i] == a[i+1]) count++;
            else if(count > n/2) {
                return a[i];
            }
            else count = 1;
        }
        return -1;
    }
};
*/

/* Approach 3
// Better than Approach 2
// T.C => O(n + n) => O(n)
// S.C => O(n) 
class Solution {
  public :
    int majorityElement(int a[], int n) {
        unordered_map<int, int> mp;
        for(int i = 0; i < n; i++) mp[a[i]]++;
        for(pair<int,int> i : mp) {
            if(i.second > n/2) return i.first;
        }
        return -1;
    }
};
*/

/* Approach 4
// Optimised Soln
// T.C => O(n + n) => O(n)
// S.C => O(1) 
class Solution {
  public :
    int majorityElement(int a[], int n) {
        int candidate = 0 , count = 0;
        for(int i = 0; i < n; i++) {
            if(count == 0) candidate = a[i];
            if(candidate == a[i]) count++;
            else count--;
        }
        count = 0;
        for(int i = 0; i < n; i++) {
            if(candidate == a[i]) count++;
        }
        if(count > n/2) return candidate; 
        return -1;
    }
};
*/

//{ Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        int arr[n];
        
        for(int i = 0;i<n;i++){
            cin >> arr[i];
        }
        Solution obj;
        cout << obj.majorityElement(arr, n) << endl;
    }
    return 0;
}
// } Driver Code Ends

TOPIC TAGS :
ARRAY    SORTING    HASHING      BOYER-MOORE'S ALGORITHM 
