Problem Link : https://practice.geeksforgeeks.org/problems/palindrome0746/1

Description :
Given an integer, check whether it is a palindrome or not.

TestCases : 
Example 1:

Input: n = 55555
Output: Yes

Example 2:

Input: n = 123
Output: No
 
Your Task:
You don't need to read or print anything. Your task is to complete the function is_palindrome() which takes the number as input parameter and returns "Yes" if it is
palindrome otherwise returns "No"(Without quotes).

Expected Time Complexity: O(x)
Expected Space Complexity: O(x) where x is number of digits in n.
 
Constraints:
1 <= n <= 1000
If the constraints are bigger i.e. -2^31-1 > n < 2^31-1 (LeetCode Constraints)
so we need to check whether any testcase will overflow or not.
Condition need to be checked => if(rev > INT_MAX / 10 || rev < INT_MIN / 10) return false;


Source Code :

//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;
// } Driver Code Ends
//User function Template for C++

// Optimal Soln 
// T.C => O(logn)
// S.C => O(1)
class Solution
{
	public:
		string is_palindrome(int n)
		{
		    int rev = 0, temp = n;
		    while(n != 0) {
		        int digit = n % 10;
		        rev = rev*10 + digit;
		        n /= 10;
		    }
		    if(rev == temp) return "Yes";
		    else return "No";
		}
};

//{ Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
    	int n;
    	cin >> n;
    	Solution ob;
    	string ans = ob.is_palindrome(n);
    	cout << ans <<"\n";
    }
	return 0;
}

// } Driver Code Ends
