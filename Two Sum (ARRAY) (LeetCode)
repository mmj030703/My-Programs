Problem Link : 
https://leetcode.com/problems/two-sum/submissions/

Description : 
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
Constraints:
2 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Only one valid answer exists.
 
Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

Source Code : 
/* Approach 1 : 
// BruteForce Soln
// T.C => O(n^2)
// S.C => O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i = 0; i < nums.size()-1; i++) {
            int element = nums[i];
            for(int j = i+1; j < nums.size(); j++) {
                if(element + nums[j] == target) {
                    ans.push_back(i);
                    ans.push_back(j);
                    break;
                }
            }
        }
        return ans;
    }
};
*/

/* Approach 2 : 
// Efficient Soln than the Naive Soln of n^2.
// T.C => O(n*logn + n + n) => O(n*logn), S.C => O(n) as extra vector is 
                                                 created
class Solution {
public:
    vector<int> twoSum(vector<int>& A, int target) {
        int n = A.size();
        
        vector<int> temp = A;
        vector<int> ans; int n1, n2;
        sort(temp.begin(), temp.end());
        
        int s = 0, e = n-1;
        while(s < e) {
            if(temp[s] + temp[e] == target) {
                n1 = temp[s];
                n2 = temp[e];
                break;
                // s++; // we can do s++ but for this question it is not
                        // needed as only one exact slon exits.
            }
            else if(temp[s] + temp[e] > target) {
                --e;
            }
            else {
                ++s;
            }
        }
        
        for(int i = 0; i < n; i++) {
            if(n1 == A[i]) {
                ans.push_back(i);              
            }
            else if(n2 == A[i]) {
                ans.push_back(i);
            }
        }
        
        return ans;
    }
};
*/

/* Approach 3a
// Better than BruteForce Soln 1 :: Better than 2nd
// T.C => O(nlogn + n + n) => O(nlogn)
// S.C => O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> temp(nums);
        vector<int> ans;
        sort(nums.begin(), nums.end());
        int n1 = 0, n2 = 0;
        int s = 0, e = nums.size()-1;
        while(s < e) {
            if(nums[s] + nums[e] == target) {
                n1 = nums[s]; n2 = nums[e];
                break;
            }
            else if(nums[s] + nums[e] > target) e--;
            else s++;
        }
        for(int i = 0; i < temp.size(); i++) {
            if(n1 == temp[i]) ans.push_back(i);
            else if(n2 == temp[i]) ans.push_back(i);
        }
        return ans;
    }
};
*/

/* Approach 3b
// Better than BruteForce Soln 2
// T.C => O(n + nlogn + nlogn + n) => O(nlogn) 
// S.C => O(n)
class Solution {
    public :
        vector<int> twoSum(vector<int>& nums, int target) {
            vector<pair<int,int>> temp;
            for(int i = 0; i < nums.size(); i++) {
                temp.push_back({nums[i], i});
            }
            sort(temp.begin(), temp.end());
            sort(nums.begin(), nums.end());
            int s = 0, e = nums.size()-1;
            while(s < e) {
                if(nums[s] + nums[e] == target) {
                    return {temp[s].second, temp[e].second};
                }
                else if(nums[s] + nums[e] > target) e--;
                else s++;
            }
            return {};
        }
};
*/

/* Approach 4a
// Optimised Soln 1 ::
// In this method we go and store elements in map one by one not all together and we store frequency in map;
// We do so a sto avoid overwriting of index of duplicate elements for eg : arr [3,3] here ind 0 -> 3 and ind 1-> 3 if we store 3 and 3 together in map so it will 
// overwrite the index first we store 3 with ind 0 then again we store 3 so as it is already present in map so it will update the existing value for key  3 as 1.
// T.C => O(n + n + n) => O(n)
// S.C => O(n)
class Solution {
    public : 
        vector<int> twoSum(vector<int>& nums, int target) {
            unordered_map<int,int> mp;
            vector<int> ans;
            int n1 = 0, n2 = 0;
            for(int i = 0; i < nums.size(); i++) mp[nums[i]]++;
            for(int i = 0; i < nums.size(); i++) {
                int b = target - nums[i];
                mp[nums[i]]--;
                if(mp[b] > 0) {
                    n1 = nums[i]; n2 = b;
                } 
                mp[nums[i]]++;
            }
            for(int i = 0; i < nums.size(); i++) {
                if(n1 == nums[i]) ans.push_back(i);
                else if(n2 == nums[i]) ans.push_back(i);
            }
            return ans;
        }
};
*/

/* Approach 4b
// Optimised Soln 2 :: Better than 1st 
// T.C => O(n) 
// S.C => O(n)
class Solution {
    public :
        vector<int> twoSum(vector<int>& nums, int target) {
            unordered_map<int,int> mp;
            unordered_map<int,int> :: iterator it;
            for(int i = 0; i < nums.size(); i++) {
                int toFind = target - nums[i];
                if(mp.find(toFind) != mp.end()) {
                    return {mp[toFind], i};
                }
                mp[nums[i]] = i;
            } 
            return {};
        }
};
*/

TOPIC TAGS :
ARRAY      TWO POINTER        HASHING
