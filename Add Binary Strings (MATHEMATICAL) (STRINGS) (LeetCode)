Problem Link :
https://leetcode.com/problems/add-binary/
GfG Link : 
https://practice.geeksforgeeks.org/problems/add-binary-strings3805/1?utm_source=youtube&utm_medium=collab_fraz_websitelink&utm_campaign=Add+Binary+Strings

Description :
Given two binary strings a and b, return their sum as a binary string.

Example 1:
Input: a = "11", b = "1"
Output: "100"

Example 2:
Input: a = "1010", b = "1011"
Output: "10101"
 
Constraints:
1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

Your Task:
You don't need to read input or print anything. Your task is to complete the function addBinary() which takes 2 binary string A and B and returns a binary string denoting the addition of both the strings.

Expected Time Complexity: O(max(|A|, |B|)).
Expected Auxiliary Space: O(max(|A|, |B|)) (for output string).

// The T.C and S.C of all the approaches below is same i.e.
// T.C => O(max(A,B))
// S.C => O(max(A,B))

Source Code :
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Java Code
package com.practice;
import java.util.Scanner;

class Solution {
    public String addBinary(String a, String b) {
        int carry = 0, s1 = a.length()-1, s2 = b.length()-1;
        String ans = "";
        while(s1 >= 0 || s2 >= 0 || carry > 0) {
            carry += (s1 >= 0) ? a.charAt(s1--) - '0' : 0;
            carry += (s2 >= 0) ? b.charAt(s2--) - '0' : 0;
            ans = (carry % 2) + ans;
            carry /= 2;
        }
        return ans;
    }
}

public class practiceQuestion {
    public static void main(String [] args) {
        Scanner sc = new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        Solution obj = new Solution();
        String ans = obj.addBinary(str1, str2);
        System.out.println(str1 + "\n" + "+" + "\n" + str2 + "\n_____________\n" + ans);
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

/* Optimal Soln // Code written by me but referenced by CodeBix Channel
// T.C => O(max(A,B))
// S.C => O(max(A,B)) // as we are taking a string for storing ans and the min length of
//                       will be of max length string i.e at least that much bits will
class Solution{       // be there
public:	
     string addBinary(string A, string B) {
	int strALen = A.size()-1, strBLen = B.size()-1;
        string s = "";
        int carry = 0;
        while(strALen >= 0 || strBLen >= 0 || carry) {
            carry += (strALen >= 0) ? A[strALen--] - '0' : 0;
            carry += (strBLen >= 0) ? B[strBLen--] - '0' : 0;
            
            s += char(carry % 2 + '0');
            carry /= 2;
        } 
        reverse(s.begin(), s.end());
        int i = 0;
	    while(s[i] == '0') i++;
	    return s.substr(i);
     }
};
*/ // Optimal Soln

/*
class Solution{
public:	
	string addBinary(string A, string B)
	{
	    string s = "";
	    int i = A.size()-1, j = B.size()-1;
	    int sum = 0;
	    while(i >=0 || j >= 0 || sum)
	    {
	        sum += i >=0 ? A[i--]-'0' : 0;
	        sum += j >=0 ? B[j--]-'0' : 0;
	        s += char(sum % 2 +'0');
	        sum /= 2;
	    }
	    reverse(begin(s),end(s));
	    i = 0;
	    while(s[i] == '0') i++;
	    return s.substr(i);
	}
};
*/

/* Code written by me but referenced by CodeBix Channel
class Solution{
public:	
	string addBinary(string A, string B) 
	{
        int aLen = A.size()-1, bLen = B.size()-1, carry = 0;
        string s = "";
        while(aLen >= 0 || bLen >= 0 || carry != 0) {
            carry += (aLen >= 0) ? A[aLen--] - '0' : 0;
            carry += (bLen >= 0) ? B[bLen--] - '0' : 0;
            
            s += char(carry % 2 + '0');
            carry /= 2;
        }
        reverse(s.begin(), s.end());
        while(s[0] == '0') s.erase(s.begin()+0);
        // int i = 0;
        // for(i = 0; s[i] == '0'; i++);
        // return s.substr(i);
        return s;
	}
};
*/

//{ Driver Code Starts.

int main()
{
	int t; cin >> t;
	while (t--)
	{
		string A, B; cin >> A >> B;
		Solution ob;
		cout << ob.addBinary (A, B);
		cout << "\n";
	}
}

// Contributed By: Pranay Bansal

// } Driver Code Ends

Topic Tags :
STRINGS            MATH
