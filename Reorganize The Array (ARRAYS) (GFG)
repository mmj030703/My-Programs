Problem Link : 
m_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Description : 
Given an array of elements of length N, ranging from 0 to N-1, your task is to write a program that rearranges the elements of the array. All elements may not be present in the array, if the element is not present then there will be -1 present in the array. Rearrange the array such that A[i] = i and if i is not present, display -1 at that place.

Example 1:
Input : A[] = {-1, -1, 6, 1, 9, 3, 2, -1, 4, -1}
Output : -1 1 2 3 4 -1 6 -1 -1 9
Explanation:
Here We can see there are 10 elements. So, the sorted array
will look like {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} but in our
array we are not having 0, 5, 7 and 8. So, at there places
we will be printing -1 and otherplaces will be having elements.

Example 2:
Input : A[] = {2, 0, 1} 
Output : 0 1 2
 
Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function Rearrange() that takes an array (arr), sizeOfArray (n), and return the array after rearranging it. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).
 
Constraints:
0 ≤ N ≤ 105
-1 ≤ A[] ≤ N-1
All values are unique other than -1.

Source Code : 
//{ Driver Code Starts
#include <iostream>
using namespace std;
int * Rearrange(int *arr,int n);

int main() {
	//code
	int t;
  cin>>t;
	while(t--) {
	    int n;cin>>n;
	    int a[n];
	    for(int i=0;i<n;i++)
	        cin>>a[i];
	    int *b = Rearrange(a,n);
	    for(int i=0;i<n;i++)
	        cout << b[i] <<" ";
	    cout << endl;
	}	
	return 0;
}
// } Driver Code Ends

/*
// BruteForce Soln
// T.C => O(n+n) => O(n)
// S.C => O(n) as we have used a map for storing elements of array
#include<bits/stdc++.h>
int * Rearrange(int *arr,int n){
    unordered_map<int, int> mp;
    for(int i = 0; i < n; i++) {          // we are storing array elements as key
        if(arr[i] < n && arr[i] > -1) {   // in the map and indexes as value of
            mp[arr[i]] = i;               // in the map and indexes as value of 
        }                                 // key, also in this map we are storing  
    }                                     // values just for completion of map as   
                                          // for every key there should be value.  
    for(int i = 0; i < n; i++) {          // we are only concerned with keys. ----- 
        
        if(mp.find(i) != mp.end()) {      // here we check whether i is present in   
            arr[i] = i;                   // map or not by finding using find func
        }                                 // if for corresponding index value is
        else arr[i] = -1;                 // not present int the map it means that
    }                                     // for that index there is no value in
    return arr;                           // array and if it is present in map it
}                                         // means that it is present in the array
*/


// Approach 2 : 
// Swapping Approach : 
// n = 5 -> no of elements of array
// arr[] = [-1, -1, 3, 2, 4]
// ind ->    0   1  2  3  4

//i = 0
// while loop starts ......
// when i = 0
// arr[0] = -1 so we skip and increment i, now i becomes 1

// when i = 1
// arr[1] = -1 so we skip it and increment i, now i becomes 2

// when i = 2
// arr[2] = 3 so it is not -1 or not equal to 2 (i not equal to 2) so we swap it i.e
// temp = arr[2]
// arr[2] = arr[temp]
// arr[temp] = temp;
// so now arr[2] = 2 and arr[temp] i.e arr[3] = 3
// updated array [-1 , -1, 2, 3, 4]

// when i = 2 as i has not changed in the above step
// now arr[2] == i so we skip it and increment i value so i becomes 3.

// when i = 3
// arr[3] == 3 i.e arr[i] == i so we skip it and increment i and it becomes 4

// when i = 4
// arr[4] == 4 i.e arr[i] == i so we skip it and increment i and it becomes 5
// now i == 5 i.e it is not lesser than n so condition becomes false and loop
// terminates.

// here is aur final array which is output
// [-1 , -1, 2, 3, 4]

// Optimal Soln
// T.C => O(n)
// S.C => O(1)
#include<bits/stdc++.h>
int * Rearrange(int *arr,int n){
    int i = 0;
    while(i < n) {
        if(arr[i] == i || arr[i] == -1) { // we check if array element is in correct
            i++;                          // position as per index or it is -1 then 
            continue;                     // then we skip it.
        }
        else {
            int temp = arr[i];   // here we swap if the above condn is false. Here
            arr[i] = arr[temp];  // we swap current pos element to it's correct pos
            arr[temp] = temp;    
        }
    }
    return arr;
}
