Problem Link : 
https://www.codingninjas.com/codestudio/problems/reverse-the-array_1262298?utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_codestudio3&leftPanelTab=0

Description :
Problem Statement
Given an array/list 'ARR' of integers and a position 'M'. You have to reverse the array after that position. Example:
We have an array ARR = {1, 2, 3, 4, 5, 6} and M = 3, considering based indexing so the subarray {5, 6} will be reversed and our
output array will be {1, 2, 3, 4, 6, 5}.

Sample Input 1:
2
6 3
1 2 3 4 5 6
5 2
10 9 8 7 6
Sample Output 1:
1 2 3 4 6 5
10 9 8 6 7
Explanation 1:
For the first test case, 
Considering 0-based indexing we have M = 3 so the 
subarray[M+1 … N-1] has to be reversed.
Therefore the required output will be {1, 2, 3, 4, 6, 5}.

For the second test case, 
Considering 0-based indexing we have M = 2 so the 
subarray[M+1 … N-1] has to be reversed.
Therefore the required output will be {10, 9, 8, 6, 7}.

Sample Input 2:
2
7 3
1 4 5 6 6 7 7 
9 3
10 4 5 2 3 6 1 3 6
Sample Output 2:
1 4 5 6 7 7 6
10 4 5 2 6 3 1 6 3 

Constraints:
1 <= T <= 10
0 <= M <= N <= 5*10^4
-10^9 <= ARR[i] <= 10^9
Time Limit: 1 sec

Source Code : 
void reverseArray(vector<int> &arr , int m) {
    
    /*
    // BruteForce Soln
    // T.C => O(n+n) => O(n)
    // S.C => O(n)
    int n = arr.size();
    vector<int> v;
    for(int i = m+1; i < n; i++) {
        v.push_back(arr[i]);
    }
    for(int i = m+1, j = 1; i < n; i++, j++) {
        arr[i] = v[v.size()-j];
    }
    */
    
    /*
    // Optimised Soln
    // T.C => O(n)
    // S.C => O(1)
    int n = arr.size();
    int s = m+1, e = n-1;
    while(s < e) {
        swap(arr[s], arr[e]);
        s++; e--;
    }
    */   
}
