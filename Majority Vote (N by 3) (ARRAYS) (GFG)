Problem Link : 
https://practice.geeksforgeeks.org/problems/majority-vote/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=majority-vote

Description : 
You are given a list of integers nums where each number represents a vote to a candidate. Return the ids of the candidates that have greater than n/3 votes, If there's 
not a majority vote, return -1. 

Example 1:
Input:
n = 11
nums = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output:
[5,6]
Explanation:
5 and 6 occur more n/3 times. 

Example 2:
Input:
n=5
nums = [1,2,3,4,5]
Output:
[-1]

Your Task:
You don't need to read input or print anything. Your task is to complete the function Solve() which takes a integer n denoting a number of element and a list of numbers 
and return the list of number which occur more than n/3 time.

Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Constraint:
1 <=  n  <= 5 * 10^4
-10^9 <= nums[i] <= 10^9

Source Code :
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution {
  public:
    
    // BruteForce Soln :: Approach 1
    // T.C => O(n^2)
    // S.C => O(1)
    /*
    vector<int> Solve(int n, vector<int>& nums) {
        vector<int> ans;
        for(int i = 0; i < n; i++) {
            int count = 1;
            for(int j = i+1; j < n; j++) {
                if(nums[i] == nums[j]) count++;
            }
            if(count > n/3 && find(ans.begin(), ans.end(), nums[i]) == ans.end()) {
                ans.push_back(nums[i]);
            }
        }
        if(ans.size() < 1) return {-1};
        return ans;
    }
    */
    
    /*
    // Using Map :: Approach 2 :: Better than BruteForce
    // T.C => O(nlogn + n) => O(nlogn)
    // S.C => O(n)
    vector<int> Solve(int n, vector<int>& nums) {
        vector<int> ans;
        map<int, int> mp;
        for(int i = 0; i < n; i++) mp[nums[i]]++;
        for(auto i : mp) {
            if(i.second > n/3) ans.push_back(i.first); 
        }
        if(ans.size()) return ans;
        return {-1};
    }
    */
    
    // Better than Approach 2 :: Approach 3
    // T.C => O(nlogn + n) => O(nlogn)
    // S.C => O(1)
    /*
    vector<int> Solve(int n, vector<int>& nums) {
        vector<int> ans;
        sort(nums.begin(), nums.end());
        if(nums[0] == nums[n-1]) return {nums[0]};
        int count = 1;
        for(int i = 0; i < n; i++) {
            if(nums[i] == nums[i+1]) count++;
            else if(count > n/3) {
                ans.push_back(nums[i]);
                count = 1;
            }
            else count = 1;
        }
        if(ans.size()) return ans;
        return {-1};
    }
    */
    
    // Boyer-Moore's Voting Algorithm
    // Optimal Soln
    // T.C => O(n + n) => O(n)
    // S.C => O(1)
    /*
    vector<int> Solve(int n, vector<int>& nums) {
        vector<int> ans;
        int candidate1 = nums[0], candidate2 = nums[0];
        int vote1 = 0, vote2 = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == candidate1) vote1++;
            else if(nums[i] == candidate2) vote2++;
            else if(vote1 == 0) {
                candidate1 = nums[i];
                vote1 = 1;
            }
            else if(vote2 == 0) {
                candidate2 = nums[i];
                vote2 = 1;
            }
            else {
                vote1--; vote2--;
            }
        }
        vote1 = 0, vote2 = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == candidate1) vote1++;
            else if(nums[i] == candidate2) vote2++;
        }
        if(vote1 > n/3) ans.push_back(candidate1);
        if(vote2 > n/3) ans.push_back(candidate2);
        if(ans.size() <= 0) return {-1};
        return ans;
    }
    */
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> a;
        for (int i = 0; i < n; ++i) {
            int x;
            cin >> x;
            a.push_back(x);
        }
        Solution obj;

        vector<int> res = obj.Solve(n, a);

        for (auto x : res) cout << x << " ";

        cout << "\n";
    }
    return 0;
}
// } Driver Code Ends


TOPIC TAGS :
ARRAYS        BOYER-MOORE'S VOTING ALGORITHM   HASH TABLE     SORTING      COUNTING


