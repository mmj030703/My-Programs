Problem Link :
https://leetcode.com/problems/4sum/description/

Description :
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 
Constraints:
1 <= nums.length <= 200
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9

Source Code :
class Solution {
public:
    /*
    // BF Soln
    // T.C => O(n^4 * nlogn) => O(n^5 * logn)
    // S.C => O(1)
    vector<vector<int>> fourSum(vector<int>& nums, int target) {    
        if(nums.size() < 4) return {};
        vector<vector<int>> ans;
        for(int i = 0; i < nums.size()-3; i++) {
            for(int j = i+1; j < nums.size()-2; j++) {
                for(int k = j+1; k < nums.size()-1; k++) {
                    for(int l = k+1; l < nums.size(); l++) {
                        if(nums[i]+nums[j] == target-(nums[k]+nums[l])) {
                            vector<int> temp;
                            temp.push_back(nums[i]);
                            temp.push_back(nums[j]);
                            temp.push_back(nums[k]);
                            temp.push_back(nums[l]);
                            sort(temp.begin(), temp.end());
                            auto it = find(ans.begin(), ans.end(), temp);
                            if(it == ans.end()) {
                                ans.push_back(temp);
                            }
                        }
                    }
                }
            }
        }
        return ans;
    */

    /*
    // Optimal Soln
    //  T.C => O(nlogn + n^3) => O(n^3)
    //  S.C => O(1)
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4) return {};
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size()-3; i++) {
            if(i == 0 || nums[i] != nums[i-1]) {
                for(int j = i+1; j < nums.size()-2; j++) {
                    if(j == i+1 || nums[j] != nums[j-1]) {
                        long long sum = (long long)target - ((long long)(nums[i]+nums[j]));
                        int start = j+1, end = nums.size()-1;
                        while(start < end) {
                            if(nums[start] + nums[end] == sum) {
                                ans.push_back({nums[i], nums[j], nums[start], nums[end]});
                                while(start < end && nums[start] == nums[start+1]) start++;
                                while(start < end && nums[end] == nums[end-1]) end--;
                                start++; end--; 
                            }
                            else if(nums[start] + nums[end] < sum) start++;
                            else end--;
                        }
                    }
                }
            }
        }
        return ans;
    }
    */

    /*
    // Approach 2 : Hashing :: TLE Soln
    //  T.C => O(n + n^4logn) => O(n^4logn)
    //  S.C => O(n)
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        unordered_map<int,int> mp;
        for(int i = 0; i < nums.size(); i++) mp[nums[i]]++;
        for(int i = 0; i < nums.size()-3; i++) {
            mp[nums[i]]--;
            for(int j = i+1; j < nums.size()-2; j++) {
                mp[nums[j]]--;
                for(int k = j+1; k < nums.size()-1; k++) {
                    mp[nums[k]]--;
                    long sum = target - nums[i] - nums[j] - nums[k];
                    if(mp[sum] > 0) {
                        vector<int> temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[k]);
                        temp.push_back(sum);
                        sort(temp.begin(), temp.end());
                        auto it = find(ans.begin(), ans.end(), temp);
                        if(it == ans.end()) ans.push_back(temp);
                    }
                    mp[nums[k]]++;
                }
                mp[nums[j]]++;
            }
            mp[nums[i]]++;
        }
        return ans;
    }
    */

};


TOPIC TAGS :
ARRAYS        TWO POINTER         SORTING

