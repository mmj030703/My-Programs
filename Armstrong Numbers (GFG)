Problem Link : 
https://practice.geeksforgeeks.org/problems/armstrong-numbers2727/1

LeetCode Problem Link : 
https://leetcode.com/problems/armstrong-number/

Description : 
For a given 3 digit number, find whether it is armstrong number or not. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. Return "Yes" if it is a armstrong number else return "No".
NOTE: 371 is an Armstrong number since 33 + 73 + 13 = 371

Example 1:
Input: N = 153
Output: "Yes"
Explanation: 153 is an Armstrong number
since 13 + 53 + 33 = 153.
Hence answer is "Yes".
Example 2:

Input: N = 370
Output: "Yes"
Explanation: 370 is an Armstrong number
since 33 + 73 + 03 = 370.
Hence answer is "Yes".

Your Task:  
You dont need to read input or print anything. Complete the function armstrongNumber() which takes n as input parameter and returns "Yes" if it is a armstrong number else returns "No"..

Expected Time Complexity: O(1)
Expected Auxiliary Space: O(1)
Constraints:
100 â‰¤ n <1000

Source Code : 
//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
// BruteForce Soln :
// T.C => O(log(n))
// S.C => O(1)
class Solution {
  public:
    string armstrongNumber(int n){
        int arm = 0;
        int n1 = n;
        while(n1 != 0) {
            int rem = n1 % 10;
            arm = arm + (rem * rem * rem);
            n1 /= 10;
        }
        if(arm == n) return "Yes";
        else return "No";
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        Solution ob;
        cout << ob.armstrongNumber(n) << endl;
    }
    return 0;
}

// } Driver Code Ends


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Find whether the given Kth Digit Number is an ArmStrong Number or not. (No question is available to practice so do it in available ide)

Example 1:
Input: N = 1634
Output: "Yes"
Explanation: 1634 is an Armstrong number
since 1 + 1296 + 81 + 256 = 1634.
Hence answer is "Yes".

Source Code : 
// BruteForce Soln :
// T.C => O(log(n) + log(n)) => O(log(n))
// S.C => O(1)
#include<bits/stdc++.h>
using namespace std;

int findDigit(int n) {
    int count = 0;
    while(n != 0) {
        count++;
        n /= 10;
    }
    return count;
}

bool isArmStrong(int n) {
    int n1 = n;
    int digit = findDigit(n);
    int arm = 0;
    while(n1 != 0) {
        int rem = n1 % 10;
        arm = arm + pow(rem, digit);
        n1 /= 10;
    }
    if(arm == n) return true;
    else return false;
}


int main() {
    int n;
    cin >> n;
    // int arr[n];
    // for(int i = 0; i < n; i++) {
    //     cin >> arr[i];
    // }
    int ans = isArmStrong(n);
    cout << "Armstrong :  " << ans; 
    return 0;
}
