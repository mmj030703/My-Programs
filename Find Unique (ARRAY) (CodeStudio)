Problem Link : 
https://www.codingninjas.com/codestudio/problems/find-unique_625159?source=youtube&campaign=love_babbar_codestudio1&utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_codestudio1&leftPanelTab=0

Decription : 
You have been given an integer array/list(ARR) of size N. Where N is equal to [2M + 1]. Now, in the given array/list, 'M' numbers are present twice and one number is 
present only once. You need to find and return that number which is unique in the array/list.

Note : 
Unique element is always present in the array/list according to the given condition.

Sample Input 1:
1    // no to test cases
7    // array size
2 3 1 6 3 6 2     // array elements

Sample Output 1:
1


Sample Input 2:
2
5
2 4 7 2 7
9
1 3 1 3 6 6 7 10 7

Sample Output 2:
4
10

Constraints:
1 <= t <= 10^2
0 <= N <= 10^3
Time Limit: 1 sec

Source Code : 
#include<bits/stdc++.h>
using namespace std;

/* Approach 1
// BruteForce Soln
// T.C => O(n^2)
// S.C => O(1)
int findUnique(int *arr, int n) {
    for(int i = 0; i < n; i++) {
        int key = arr[i], count = 0;
        for(int j = 0; j < n; j++) {
            if(key == arr[j]) count++;
        }
        if(count == 1) return key;
    }
    return false;
}
*/

/*
// Approach 2 :  Using Set
// T.C => O(n) + O(n^2) => O(n^2)
// S.C => O(n)
int findUnique(int *arr, int n) {
    unordered_set<int> s;
    int countUnique = 1;
    for(int i = 0; i < n; i++) {
        s.insert(arr[i]);
    }
    for(int i : s) {
        for(int j = 0; j < n; j++) {
            if(i == arr[j]) countUnique++;
        }
        if(countUnique == 2) return i;
        else countUnique = 1;
    }
    return 0;
}
*/

/*
//Approach 3 : Sorting
// T.C => O(nlogn) + O(n) => O(nlogn)
// S.C => O(1)
int findUnique(int *arr, int n) {
    sort(arr, arr+n);
    int countUnique = 1;
    for(int i = 0; i < n; i++) {
        if(arr[i] == arr[i+1]) countUnique++;
        else if(countUnique == 1) return arr[i];
        else countUnique = 1;
    }
    return 0;
}
*/

/*
// Approach 4 :  Using Map
// T.C => O(n) + O(n) => O(n)
// S.C => O(n)
int findUnique(int *arr, int n) {
    unordered_map<int, int> mp;
    for(int i = 0; i < n; i++) {
        mp[arr[i]]++;
    }
    for(pair<int, int> i : mp) {
        if(i.second == 1) return i.first;
    }
    return 0;
}
*/

// Approach 5 :  Using XOR
// T.C => O(n)
// S.C => O(1)
int findUnique(int *arr, int n) {
  int ans = 0;
  for(int i = 0; i < n; i++) {
      ans = ans ^ arr[i];
  }
  return ans;
}
