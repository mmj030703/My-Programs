Problem Link : 
https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/description/

Description :
Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return 
false.
There may be duplicates in the original array.
Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].
Example 2:

Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.
Example 3:

Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.
 
Constraints:
1 <= nums.length <= 100
1 <= nums[i] <= 100

Source Code :
/* BruteForce Soln :: 1
// Not an Optimised Soln
// T.C => O(nlogn + n^2) => O(n^2)
// S.C => O(n)
class Solution {
    public :
    void reverse(vector<int> &nums, int s, int e) {
        while(s < e) {
            swap(nums[s++], nums[e--]);
        }
    }
    bool check(vector<int>& nums) {
        int n = nums.size();
        vector<int> sortedNums; 
        sortedNums = nums;
        sort(sortedNums.begin(), sortedNums.end());
        if(sortedNums == nums) return true;
        for(int i = 1; i <= n-1; i++) {
            reverse(nums, 0, n-2);
            reverse(nums, 0, n-1);
            if(sortedNums == nums) return true;
        }
        return false;
    }
};
*/

/* BruteForce Soln :: 2 :: Better than BruteForce 
// Not optimised Soln
// T.C => O(nlogn + n + nlogn + n) => o(nlogn)
// S.C => O(n+n) => O(n)
class Solution {
    public:
    bool check(vector<int>& nums) {
        vector<int> v(nums);
        vector<int> v1(nums);
        sort(v.begin(), v.end());
        if(v == nums) return true;
        // Calculate the no of rotations
        int rotations = 1;
        for(int i = 0; i < nums.size()-1; i++) {
            if(nums[i] <= nums[i+1]) rotations++; 
            else break;
        }
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++) {
            v[(i+rotations) % nums.size()] = nums[i]; 
        }
        if(v == v1) return true;
        else return false;
    }
};
*/

/*
// Optimal Soln 1
// T.C => O(n+n+n) => O(n)
// S.C => O(1)
int isSorted(vector<int>& arr, int s, int e) {
    for(int i = s; i < e; i++) {
        if(arr[i] > arr[i+1]) return false;
    }
    return true;
}

class Solution {
public:
    bool check(vector<int>& nums) {
        int n = nums.size();
        int minInd = 0;
        
        for(int i = 1; i < n; i++) {
            if(nums[minInd] > nums[i]) minInd = i;
        }
        
        bool isSorted_Left = isSorted(nums, 0, minInd);
        bool isSorted_Right = isSorted(nums, minInd, n-1);
    
        bool lastFirstEle_IsSorted = 1;
        if(nums[n-1] > nums[0]) {
            lastFirstEle_IsSorted = 0;
        }
        
        if(minInd == 0) return (isSorted_Right);
        
        
    return (isSorted_Left && isSorted_Right && lastFirstEle_IsSorted);
    }
};
*/

/* Most Optimised Soln :: 2
// Optimised Soln :: Just finding number of greater pairs
// for sorted and rotated greater pairs are only 1, for only sorted array
// greater pairs are 1, for array sorted and having all elements equal have 
// greater pairs 0,
// for non sorted array the greater pairs are always greatere than one. 
// T.C => O(n)
// S.C => O(1)
class Solution {
    bool check(vector<int> &nums) {
        int n = nums.size();
        int greaterCount = 0;
        for(int i = 0; i < n-1; i++) {
            if(nums[i] > nums[i+1]) greaterCount++;
        }
        if(nums[n-1] > nums[0]) greaterCount++; // for checking whether last
        return greaterCount <= 1;               // and first element.
    }
};
*/

// Another Optimal Soln can be find using Pivot Element.
// Pivot is found using Binary Search

TOPIC TAGS : 
(ARRAY) (BINARY SEARCH)
