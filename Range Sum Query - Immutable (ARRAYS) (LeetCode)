Problem Link : 
https://leetcode.com/problems/range-sum-query-immutable/description/

Description :
Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive 
(i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:
Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]

Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 
Constraints:
1 <= nums.length <= 10^4
-10^5 <= nums[i] <= 10^5
0 <= left <= right < nums.length
At most 10^4 calls will be made to sumRange.

Source Code :
/*
// BF Soln :: Create a nums array in class NumArray and 
//            initialize nums in the constructor with 
//            parameter nums[] so that we can use the nums 
//            array in the whole class.
//            In the sumRange calculate the sum of that range
//            using for loop starting from left and ending at
//            right.
// T.C => O(m*n) // m queries and n iterations for m queries.
// S.C => O(n)
class NumArray {
    public int [] nums;
    public NumArray(int[] nums) {
        this.nums = nums;
    }
    
    public int sumRange(int left, int right) {
        int sum = 0;
        for(int i = left; i <= right; i++) sum += nums[i];
        return sum;
    }
}
*/
//////////////////////////////////////////////////////////////
// T.C => O(m*1 + n) => O(m) // n for one loop in contructor
// S.C => O(1)
class NumArray {
    int [] prefixSum;
    public NumArray(int[] nums) {
        prefixSum = new int[nums.length];
        int sum = 0;
        for(int i = 0; i < nums.length; i++) {
            sum += nums[i];
            prefixSum[i] = sum;
        }
    }
    
    public int sumRange(int left, int right) {
        if(left == 0) {
            return prefixSum[right];
        }
        else return prefixSum[right]-prefixSum[left-1];
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.sumRange(left,right);
 */


Topic Tags :
ARRAYS        PREFIX SUM
